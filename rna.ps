%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.18
%%CreationDate: Mon Apr 11 12:42:13 2022
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUUUCUUCUUCCGGAGUUUUAGAGCUAGAAAUAGCAAGUUAAAAUAAGGCUAGUCCGUUAUCAACUUGAAAAAGUGGCACCGAGUCGGUGCUUU\
) } def
/len { sequence length } bind def

/coor [
[108.44229126 158.05931091]
[98.88226318 158.45877075]
[89.41729736 157.29994202]
[80.29882812 154.62437439]
[71.76731110 150.51371765]
[64.04593658 145.08732605]
[57.33473587 138.49880981]
[51.80544662 130.93171692]
[47.59710312 122.59436035]
[44.81256104 113.71417999]
[43.51600647 104.53147125]
[43.73151016 95.29292297]
[45.44266129 86.24497986]
[48.59329987 77.62726593]
[53.08928299 69.66622162]
[58.80128098 62.56921005]
[49.15946579 51.07854080]
[39.51765442 39.58787537]
[29.87583923 28.09720802]
[18.85696411 17.91956711]
[6.63832426 9.21871376]
[-5.58031464 0.51785988]
[-17.79895401 -8.18299389]
[-30.01759338 -16.88384819]
[-42.23623276 -25.58470154]
[-54.45487213 -34.28555298]
[-74.47295380 -35.10462189]
[-82.11057281 -52.74879074]
[-94.85645294 -60.65717316]
[-107.60233307 -68.56555176]
[-120.34821320 -76.47393799]
[-136.74734497 -76.45315552]
[-144.72964478 -90.77848053]
[-136.08358765 -104.71325684]
[-119.70352173 -103.92256927]
[-112.43983459 -89.21981812]
[-99.69395447 -81.31143951]
[-86.94807434 -73.40305328]
[-74.20218658 -65.49467468]
[-64.28000641 -68.75061035]
[-54.01725006 -65.85057068]
[-46.97939682 -57.54483795]
[-45.75401688 -46.50419235]
[-33.53537750 -37.80334091]
[-21.31674004 -29.10248756]
[-9.09810066 -20.40163231]
[3.12053871 -11.70077896]
[15.33917809 -2.99992585]
[27.55781746 5.70092773]
[25.58589935 -9.16889191]
[32.51592636 -22.47207642]
[45.83155823 -29.37815475]
[60.69780731 -27.37948608]
[71.71663666 -17.20179749]
[74.88704681 -2.54067445]
[69.05783081 11.28033447]
[56.34562302 19.24273109]
[41.36650467 18.45539474]
[51.00831985 29.94606018]
[60.65013504 41.43672562]
[70.29194641 52.92739487]
[86.06005096 45.54873276]
[103.50114441 43.35672760]
[120.93714905 46.66706085]
[136.65818787 55.26094055]
[149.09024048 68.39642334]
[156.95252991 84.87152100]
[159.38903809 103.13387299]
[174.37203979 102.42014313]
[189.35505676 101.70642090]
[204.33805847 100.99269104]
[217.83386230 91.67627716]
[232.53199768 98.94927979]
[233.31230164 115.32984924]
[219.37205505 123.96706390]
[205.05178833 115.97570038]
[190.06878662 116.68943024]
[175.08576965 117.40316010]
[160.10275269 118.11688232]
[154.08880615 131.85850525]
[163.73062134 143.34918213]
[173.37243652 154.83984375]
[183.01425171 166.33050537]
[192.65605164 177.82118225]
[202.29786682 189.31184387]
[211.93968201 200.80250549]
[226.75265503 209.04948425]
[222.92861938 225.56652832]
[205.99845886 226.46432495]
[200.44902039 210.44432068]
[190.80720520 198.95365906]
[181.16539001 187.46299744]
[171.52357483 175.97232056]
[161.88175964 164.48165894]
[152.23994446 152.99099731]
[142.59812927 141.50032043]
[135.15536499 147.71977234]
[126.82729340 152.62748718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 61]
[17 60]
[18 59]
[19 58]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[28 39]
[29 38]
[30 37]
[31 36]
[68 79]
[69 78]
[70 77]
[71 76]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
